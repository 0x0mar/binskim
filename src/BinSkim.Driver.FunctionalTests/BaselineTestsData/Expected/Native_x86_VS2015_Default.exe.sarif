{
  "version": "0.4",
  "runLogs": [
    {
      "toolInfo": {
        "name": "BinSkim",
        "fullName": "BinSkim 1.2.14-beta",
        "version": "1.2.14"
      },
      "runInfo": {
        "invocationInfo": "\"D:\\src\\binskim-ms\\bld\\bin\\BinSkim.Driver\\x86_Release\\BinSkim.exe\" analyze D:\\src\\binskim-ms\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\Native_x86_VS2015_Default.exe --output D:\\src\\binskim-ms\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\Expected\\Native_x86_VS2015_Default.exe.sarif.temp --verbose --config default",
        "analysisTargets": [
          {
            "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe"
          }
        ]
      },
      "results": [
        {
          "ruleId": "MSG1001",
          "kind": "note",
          "formattedMessage": {
            "specifierId": "AnalyzingTarget",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "kind": "notApplicable",
          "formattedMessage": {
            "specifierId": "InvalidMetadata",
            "arguments": [
              "Native_x86_VS2015_Default.exe",
              "BA2015",
              "EnableHighEntropyVirtualAddresses",
              "image is not a 64-bit binary"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "kind": "notApplicable",
          "formattedMessage": {
            "specifierId": "InvalidMetadata",
            "arguments": [
              "Native_x86_VS2015_Default.exe",
              "BA2001",
              "LoadImageAboveFourGigabyteAddress",
              "image is not a 64-bit binary"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2006",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe",
              "17.0.65501.17016",
              "11.0.65501.17016"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2014",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2002",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "kind": "error",
          "formattedMessage": {
            "specifierId": "Fail",
            "arguments": [
              "Native_x86_VS2015_Default.exe",
              ".textbss"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2008",
          "kind": "error",
          "formattedMessage": {
            "specifierId": "Fail",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2007",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe",
              "2147483647"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2011",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "kind": "error",
          "formattedMessage": {
            "specifierId": "Fail",
            "arguments": [
              "Native_x86_VS2015_Default.exe",
              "has an empty SE handler table in the load configuration table"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2013",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "kind": "pass",
          "formattedMessage": {
            "specifierId": "Pass",
            "arguments": [
              "Native_x86_VS2015_Default.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": [
                {
                  "uri": "file:///D:/src/binskim-ms/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Native_x86_VS2015_Default.exe",
                  "mimeType": "application/octet-stream"
                }
              ]
            }
          ]
        }
      ],
      "ruleInfo": [
        {
          "id": "MSG1001",
          "name": "AnalyzingTarget",
          "fullDescription": "An analysis target was analyzed.",
          "formatSpecifiers": {
            "AnalyzingTarget": "Analyzing '{0}'..."
          }
        },
        {
          "id": "MSG1002",
          "name": "InvalidTarget",
          "fullDescription": "A file was skipped as it does not appear to be a valid target for analysis.",
          "formatSpecifiers": {
            "InvalidFileType": "'{0}' was not analyzed as it does not appear to be a valid file type for analysis.",
            "InvalidMetadata": "'{0}' was not evaluated for check '{1}:{2}' as the analysis is not relevant based on observed metadata: {3}."
          }
        },
        {
          "id": "BA2006",
          "name": "BuildWithSecureTools",
          "shortDescription": "Application code should be compiled with the most up-to-date tool sets possible in order to take advantage of the most current compile-time security features.",
          "fullDescription": "Application code should be compiled with the most up-to-date tool sets possible in order to take advantage of the most current compile-time security features.",
          "options": {},
          "formatSpecifiers": {
            "Fail_BadModule": "built with {0} compiler version {1} (Front end version {2})",
            "Pass": "'{0}' was built with a tool chain that satisfies configured policy (compiler minimum version {1}, linker minimum version {2}).",
            "Fail": "'{0}' was compiled with one or more modules which were not built using minimum required tool versions (compiler version {1}, linker version {2}). More recent tool chains contain mitigations that make it more difficult for an attacker to exploit vulnerabilities in programs they produce. To resolve this issue, compile and/or link your binary with more recent tools. If you are servicing a product where the tool chain cannot be modified (e.g. producing a hotfix for an already shipped version) ignore this warning.\r\nModules built outside of policy: \r\n{3}"
          }
        },
        {
          "id": "BA2014",
          "name": "DoNotDisableStackProtectionForFunctions",
          "shortDescription": "Application code should not disable stack protection for individual functions.",
          "fullDescription": "Application code should not disable stack protection for individual functions. The stack protector (/GS) is a security feature of the Windows native compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. Disabling the stack protector, even on a function-by-function basis, can compromise the security of code. To resolve this issue, remove occurrences of __declspec(safebuffers) from your code. If the additional code inserted by the stack protector has been shown in profiling to cause a significant performance problem for your application, attempt to move stack buffer modifications out of the hot path of execution to allow the compiler to avoid inserting stack protector checks in these locations rather than disabling the stack protector altogether.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' is a C or C++ binary built with the stack protector buffer security feature enabled which does not disable protection for any individual functions (via __declspec(safebuffers), making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities.",
            "Fail": "'{0}' is a C or C++ binary built with function(s) ({1}) that disable the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. Disabling the stack protector, even on a function-by-function basis, is disallowed by SDL policy. To resolve this issue, remove occurrences of __declspec(safebuffers) from your code. If the additional code inserted by the stack protector has been shown in profiling to cause a significant performance problem for your application, attempt to move stack buffer modifications out of the hot path of execution to allow the compiler to avoid inserting stack protector checks in these locations rather than disabling the stack protector altogether."
          }
        },
        {
          "id": "BA2002",
          "name": "DoNotIncorporateVulnerableDependencies",
          "shortDescription": "Binaries should not take dependencies on other code with known security vulnerabilities.",
          "fullDescription": "Binaries should not take dependencies on other code with known security vulnerabilities.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' does not incorporate any known vulnerable dependencies, as configured by current policy.",
            "Fail": "'{0}' was built with a dependency on version of {1}, which is subject to the following issues: {2}. To resolve this, {3}. The source files that triggered this were: {4}"
          }
        },
        {
          "id": "BA2010",
          "name": "DoNotMarkImportsSectionAsExecutable",
          "shortDescription": "PE sections should not be marked as both writable and executable.",
          "fullDescription": "PE sections should not be marked as both writable and executable. This condition makes it easier for an attacker to exploit memory corruption vulnerabilities, as it may provide an attacker executable location(s) to inject shellcode. Because the loader will always mark the imports section as writable, it is therefore important to mark this section as non-executable. To resolve this issue, ensure that your program does not mark the imports section executable. Look for uses of /SECTION or /MERGE on the linker command line, or #pragma segment in source code, which change the imports section to be executable, or which merge the \".rdata\" segment into an executable section.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' does not have an imports section that is marked as executable, helping to prevent the exploitability of code vulnerabilities.",
            "Fail": "'{0}' has the imports section marked executable. Because the loader will always mark the imports section as writable, it is important to mark this section as non-executable, so that an attacker cannot place shellcode here. To resolve this issue, ensure that your program does not mark the imports section as executable. Look for uses of /SECTION or /MERGE on the linker command line, or #pragma segment in source code, which change the imports section to be executable, or which merge the \".rdata\" segment into an executable section."
          }
        },
        {
          "id": "BA2021",
          "name": "DoNotMarkWritableSectionsAsExecutable",
          "shortDescription": "Code or data sections should not be marked as both shared and writable.",
          "fullDescription": "Code or data sections should not be marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' contains no data or code sections marked as both shared and executable, helping to prevent the exploitability of code vulnerabilities.",
            "Fail": "'{0}' contains PE section(s) ({1}) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your toolchain to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
            "Fail_UnexpectedSectionAligment": "'{0}' has a section alignment ({1}) that is smaller than page size ({2})."
          }
        },
        {
          "id": "BA2019",
          "name": "DoNotMarkWritableSectionsAsShared",
          "shortDescription": "Code or data sections should not be marked as both shared and writable.",
          "fullDescription": "Code or data sections should not be marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' contains no data or code sections marked as both shared and writable, helping to prevent the exploitability of code vulnerabilities.",
            "Fail": "'{0}' contains one or more code or data sections ({1}) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to mutate memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you are required to share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.)."
          }
        },
        {
          "id": "BA2012",
          "name": "DoNotModifyStackProtectionCookie",
          "shortDescription": "Application code should not interfere with the stack protector.",
          "fullDescription": "Application code should not interfere with the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector relies on a random number, called the \"security cookie\", to detect these buffer overflows. This 'cookie' is statically linked with your binary from a Visual C++ library in the form of the symbol __security_cookie. On recent Windows versions, the loader looks for the magic statically linked value of this cookie, and initializes the cookie with a far better source of entropy -- the system's secure random number generator -- rather than the limited random number generator available early in the C runtime startup code. When this symbol is not the default value, the additional entropy is not injected by the operating system, reducing the effectiveness of the stack protector. To resolve this issue, ensure that your code does not reference or create a symbol named __security_cookie or __security_cookie_complement.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
            "Pass_NoLoadConfig": "'{0}' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
            "Fail": "'{0}' is a C or C++ binary that interferes with the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector relies on a random number, called the \"security cookie\", to detect these buffer overflows. This 'cookie' is statically linked with your binary from a Visual C++ library in the form of the symbol __security_cookie. On recent Windows versions, the loader looks for the magic statically linked value of this cookie, and initializes the cookie with a far better source of entropy -- the system's secure random number generator -- rather than the limited random number generator available early in the C runtime startup code. When this symbol is not the default value, the additional entropy is not injected by the operating system, reducing the effectiveness of the stack protector. To resolve this issue, ensure that your code does not reference or create a symbol named __security_cookie or __security_cookie_complement. NOTE: the modified cookie value detected was: {1}",
            "Fail_CouldNotLocateCookie": "'{0}' is a C or C++binary that enables the stack protection feature but the security cookie could not be located. The binary may be corrupted."
          }
        },
        {
          "id": "BA2005",
          "name": "DoNotShipVulnerableBinaries",
          "shortDescription": "Do not ship obsolete libraries for which there are known security vulnerabilities.",
          "fullDescription": "Do not ship obsolete libraries for which there are known security vulnerabilities.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
            "Fail": "'{0}' appears to be an obsolete library (version {1}) for which there are known security vulnerabilities. To resolve this issue, obtain a version of {0} that is newer than version {2}. If this binary is not in fact {0}, ignore this warning.",
            "Fail_CouldNotParseVersion": "Version information for '{0}' could not be parsed. The binary therefore could not be verified not to be an obsolete binary that is known to be vulnerable to one or more security problems."
          }
        },
        {
          "id": "BA2009",
          "name": "EnableAddressSpaceLayoutRandomization",
          "shortDescription": "Binaries should linked as DYNAMICBASE in order to be eligible for relocation by Address Space Layout Randomization (ASLR).",
          "fullDescription": "Binaries should linked as DYNAMICBASE in order to be eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. Configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' is properly compiled to enable address space layout randomization, reducing an attacker's ability to exploit code in well-known locations.",
            "Fail_NotDynamicBase": "'{0}' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tool chain to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
            "Fail_RelocsStripped": "'{0}' is marked as DYNAMICBASE but relocation data has been stripped from the image, preventing address space layout randomization. ",
            "Fail_WinCENoRelocationSection": "'{0}' is a Windows CE image but does not contain any relocation data, preventing address space layout randomization."
          }
        },
        {
          "id": "BA2008",
          "name": "EnableControlFlowGuard",
          "shortDescription": "Binaries should enable the compiler control guard feature (CFG) at build time in order to prevent attackers from redirecting execution to unexpected, unsafe locations.",
          "fullDescription": "Binaries should enable the compiler control guard feature (CFG) at build time in order to prevent attackers from redirecting execution to unexpected, unsafe locations. CFG analyzes and discovers all indirect-call instructions at compilation and link time. It also injects a check that precedes every indirect call in code that ensures the target is an expected, safe location.  If that check fails at runtime, the operating system will close the program.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' enables the control flow guard mitigation. As a result, the operating system will force an application to close if an attacker is able to redirect execution in the component to an unexpected location.",
            "Fail": "'{0}' does not enable the control flow guard (CFG) mitigation. To resolve this issue, pass /GUARD:CF on both the compiler and linker command lines. Binaries also require the /DYNAMICBASE linker option in order to enable CFG."
          }
        },
        {
          "id": "BA2007",
          "name": "EnableCriticalCompilerWarnings",
          "shortDescription": "Binaries should be compiled with a warning level that enables all critical security-relevant checks.",
          "fullDescription": "Binaries should be compiled with a warning level that enables all critical security-relevant checks. Enabling at least warning level 3 enables important static analysis in the compiler that can identify bugs with a potential to provoke memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' was compiled at a secure warning level ({1}) and does not include any modules that disable specific warnings that are required by policy. As a result, there is a greater likelihood that memory corruption, information disclosure, double-free and other security-related vulnerabilities do not exist in code.",
            "Fail_WarningsDisabled": "'{0}' disables compiler warning(s) which are required by policy. A compiler warning is typically required if it has a high likelihood of flagging memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, enable the indicated warning(s) by removing /Wxxxx switches (where xxxx is a warning id indicated here) from your command line, and resolve any warnings subsequently raised during compilation. An example compiler command line triggering this check was: {1}\r\nModules triggering this check were:\r\n{2}",
            "Fail_InsufficientWarningLevel": "'{0}' was compiled at too low a warning level (effective warning level {1} for one or more modules). Warning level 3 enables important static analysis in the compiler to flag bugs that can lead to memory corruption, information disclosure, or double-free vulnerabilities. To resolve this issue, compile at warning level 3 or higher by supplying /W3, /W4, or /Wall to the compiler, and resolve the warnings emitted. An example compiler command line triggering this check: {2}\r\nModules triggering this check: {3}",
            "Fail_UnknownModuleLanguage": "'{0}' contains code from an unknown language, preventing a comprehensive analysis of the compiler warning settings. The language could not be identified for the following modules: {1}"
          }
        },
        {
          "id": "BA2011",
          "name": "EnableStackProtection",
          "shortDescription": "Binaries should be built with the stack protector buffer security feature (/GS) enabled in order to increase the difficulty of exploiting stack buffer overflow memory corruption vulnerabilities.",
          "fullDescription": "Binaries should be built with the stack protector buffer security feature (/GS) enabled in order to increase the difficulty of exploiting stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that all modules compiled into the binary are compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' is a C or C++ binary built with the stack protector buffer security feature enabled for all modules, making it more difficult for an attacker to exploit stack buffer overflow memory corruption vulnerabilities. ",
            "Fail": "'{0}' is a C or C++ binary built with the stack protector buffer security feature disabled in one or more modules. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. To resolve this issue, ensure that your code is compiled with the stack protector enabled by supplying /GS on the Visual C++ compiler command line. The affected modules were: {1}",
            "Fail_UnknownModuleLanguage": "'{0}' contains code from an unknown language, preventing a comprehensive analysis of the stack protector buffer security features. The language could not be identified for the following modules: {1}."
          }
        },
        {
          "id": "BA2018",
          "name": "EnableSafeSEH",
          "shortDescription": "X86 binaries should enable the SafeSEH mitigation in order to minimize exploitable memory corruption issues.",
          "fullDescription": "X86 binaries should enable the SafeSEH mitigation in order to minimize exploitable memory corruption issues. SafeSEH makes it more difficult to vulnerabilities that permit overwriting SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
            "Pass_NoSEH": "'{0}' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
            "Fail": "'{0}' is an x86 binary which {1}, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64."
          }
        },
        {
          "id": "BA2013",
          "name": "InitializeStackProtection",
          "shortDescription": "Binaries should properly initialize the stack protector (/GS) in order to increase the difficulty of exploiting stack buffer overflow memory corruption vulnerabilities.",
          "fullDescription": "Binaries should properly initialize the stack protector (/GS) in order to increase the difficulty of exploiting stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' is a C or C++ binary built with the buffer security feature that properly initializes the stack protecter. This has the effect of increasing the effectiveness of the feature and reducing spurious detections.",
            "Pass_NoCode": "'{0}' is a C or C++ binary that is not required to initialize the stack protection, as it does not contain executable code.",
            "NotApplicable_FeatureNotEnabled": "'{0}' is a C or C++ binary that does enable the stack protection buffer security feature. It is therefore not required to initialize the stack protector.",
            "Fail": "'{0}' is a C or C++ binary that does not initialize the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector requires access to entropy in order to be effective, which means a binary must initialize a random number generator at startup, by calling __security_init_cookie() as close to the binary's entry point as possible. Failing to do so will result in spurious buffer overflow detections on the part of the stack protector. To resolve this issue, use the default entry point provided by the C runtime, which will make this call for you, or call __security_init_cookie() manually in your custom entry point."
          }
        },
        {
          "id": "BA2016",
          "name": "MarkImageAsNXCompatible",
          "shortDescription": "Binaries should be marked as NX compatible in order to help prevent execution of untrusted data as code.",
          "fullDescription": "Binaries should be marked as NX compatible in order to help prevent execution of untrusted data as code. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), triggers a processor security feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit (because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment). Ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "options": {},
          "formatSpecifiers": {
            "Pass": "'{0}' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
            "Fail": "'{0}' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tool chain is configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker."
          }
        }
      ]
    }
  ]
}